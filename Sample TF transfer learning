import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model

# Load the ResNet50 model with pretrained weights
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Display the layer names to identify the 30th layer
for i, layer in enumerate(base_model.layers):
    print(f"{i}: {layer.name}")

# Create a new model branching out from layer 30
branch_layer_index = 30
branch_output = base_model.layers[branch_layer_index].output

# Add custom layers for transfer learning
x = tf.keras.layers.GlobalAveragePooling2D()(branch_output)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
output = tf.keras.layers.Dense(10, activation='softmax')(x)  # Example for 10 classes

# Create the transfer learning model
transfer_model = Model(inputs=base_model.input, outputs=output)

# Freeze the base model layers to retain pretrained weights
for layer in base_model.layers[:branch_layer_index + 1]:
    layer.trainable = False

# Compile the model
transfer_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Display the model summary
transfer_model.summary()
